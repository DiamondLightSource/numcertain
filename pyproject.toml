[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools",
    "oldest-supported-numpy",
    "wheel",
    "setuptools_scm[toml]",
]

[project]
name = "numcertain"
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
description = "A python & numpy data type for floating point numbers with quantified uncertainity."
dependencies = [
    "numpy",
] # Add project dependencies here, e.g. ["click", "numpy"]
dynamic = ["version"]
license.file = "LICENSE"
readme = "README.rst"
requires-python = ">=3.9"

[project.optional-dependencies]
dev = [
    "black",
    "mypy",
    "flake8-isort",
    "flake8-pyi",
    "Flake8-pyproject",
    "pipdeptree",
    "pre-commit",
    "pydocstyle[toml]",
    "pytest-cov",
    "tox-direct",
]
docs = [
    "pydata-sphinx-theme>=0.12",
    "sphinx-autobuild",
    "sphinx-copybutton",
    "sphinx-design",
    "tox-direct",
]

[project.urls]
GitHub = "https://github.com/DiamondLightSource/numcertain"

[[project.authors]] # Further authors may be added by duplicating this section
email = "garry.o'donnell@diamond.ac.uk"
name = "Garry O'Donnell"

[tool.setuptools_scm]
write_to = "src/numcertain/_version.py"

[tool.mypy]
ignore_missing_imports = true          # Ignore missing stubs in imported modules
plugins = ["numpy.typing.mypy_plugin"]

[tool.isort]
float_to_top = true
profile = "black"

[tool.flake8]
extend-ignore = [
    "E203", # See https://github.com/PyCQA/pycodestyle/issues/373
    "F811", # support typing.overload decorator
    "F722", # allow Annotated[typ, some_func("some string")]
]
max-line-length = 88 # Respect black's line length (default 88),
exclude = [".tox", "venv"]

[tool.pydocstyle]
add-ignore = [
    "D100", # Ignore missing docstrings in public modules
    "D104", # Ignore missing docstrings in public packages
    "D418", # Ignore missing docstrings in dunder methods; See: https://github.com/PyCQA/pydocstyle/issues/525
]
convention = "google"

[tool.pytest.ini_options]
# Run pytest with all our checkers, and don't spam us with massive tracebacks on error
addopts = """
    --tb=native -vv --doctest-modules --doctest-glob="*.rst"
    --cov=numcertain --cov-report term --cov-report xml:cov.xml
    """
# https://iscinumpy.gitlab.io/post/bound-version-constraints/#watch-for-warnings
filterwarnings = "error"
# Doctest python code in docs, python code in src docstrings, test functions in tests
testpaths = "src tests"

[tool.coverage.run]
data_file = "/tmp/numcertain.coverage"

[tool.coverage.paths]
# Tests are run from installed location, map back to the src directory
source = ["src", "**/site-packages/"]

# tox must currently be configured via an embedded ini string
# See: https://github.com/tox-dev/tox/issues/999
[tool.tox]
legacy_tox_ini = """
[tox]
skipsdist=True

[testenv:{pre-commit,mypy,pytest,docs}]
# Don't create a virtualenv for the command, requires tox-direct plugin
direct = True
passenv = *
allowlist_externals = 
    pytest 
    pre-commit
    mypy
    sphinx-build
    sphinx-autobuild
commands =
    pytest: pytest {posargs}
    mypy: mypy src tests {posargs}
    pre-commit: pre-commit run --all-files {posargs}
    docs: sphinx-{posargs:build -EW --keep-going} -T docs build/html
"""
